<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rflow [
<!ENTITY lt "&#38;#60;">
<!ENTITY gt "&#62;">
<!ENTITY amp "&#38;#38;">
<!ENTITY apos "&#39;">
<!ENTITY quot "&#34;">
]>
<rflow>
	<graph version="0.8" width="1426" height="617" locationtype="a" offsetx="100" offsety="121">
		<setting>
			<entry key="USE_GRID">true</entry>
			<entry key="FOLDER">cmnSurveys</entry>
			<entry key="GRID_DISTANCE2">10</entry>
		</setting>
<properties>
<v key="packages"/>
</properties>
		<node id="0" date="1531929174847" uid="fd6ca739aa2c5ec" x="-50" y="-70">
			<command>rm(list = ls())
gc()
</command>
			<property title="reset" shape="STAR"/>
			<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
		</node>
		<node id="1" date="1532077231471" uid="89a4717b15077a1a" x="160" y="-70">
			<command>## Calculate &apos;K&apos; for single coverage estimate assuming average length of an untreated episode or SAM or MAM is 7.5 months from Garenne et al. (2009)
medianLOS &lt;- median(work$medianLOS, na.rm = TRUE)
k &lt;- ((7.5 * 30.44) / 7) / work$medianLOS

## Calculate r.out (recovering cases NOT in the program)
r.out &lt;- floor((1 / work$k) * (work$r.in * ((work$c.in + work$c.out + 1) / (work$c.in + 1)) - work$r.in))

## Calculate Prior modes (priorMode) from priorAlpha and priorBeta with their standard errors (priorModeSE)
priorN &lt;- work$priorAlpha - 1
priorD &lt;- work$priorAlpha + work$priorBeta - 2
priorMode &lt;- priorN / priorD

## Calculate appropriate likelihood numerators (likeN) denominators (likeD)
likeN &lt;- ifelse(work$coverType == &quot;point&quot;, work$c.in, work$c.in + work$r.in)
likeD &lt;- ifelse(work$coverType == &quot;point&quot;, work$c.in + work$c.out, ifelse(work$coverType == &quot;period&quot;, work$c.in + work$r.in + work$c.out, work$c.in + work$r.in + work$c.out + work$r.out))
likeMode &lt;- likeN / likeD
	
## Make summary data.frame
results &lt;- data.frame(priorN, priorD, priorMode, likeN, likeD, likeMode)
results &lt;- results[!is.na(results$priorMode) &amp; !is.na(results$likeMode), ]
rm(work, medianLOS, k, r.out, priorN, priorD, priorMode, likeN, likeD, likeMode)

## Test for  prior-likelihood conflict
for(i in 1:nrow(results))
{
	# Make a two-by-two table
	tab &lt;- matrix(c(results$priorN[i], results$priorD[i] - results$priorN[i],
	results$likeN[i], results$likeD[i] - results$likeN[i]), nrow = 2, byrow = TRUE)
     # Fisher test (works with expected numbers &lt; 5)
     results$p[i] &lt;- round(fisher.test(round(tab))$p.value, 4)
}
results$PLC &lt;- ifelse(results$p &lt; 0.05, TRUE, FALSE)
rm(i, tab)

## How common are prior-likelihood conflicts?
table(results$PLC)
round(prop.table(table(results$PLC)) * 100, 2)

## How are the prior and likelihood modes related?
png(filename = &quot;plPlot.png&quot;, width = 6, height = 6, units = &quot;in&quot;, pointsize = 12, res = 600)
par(pty = &quot;s&quot;)
plot(results$priorMode * 100, results$likeMode * 100, xlim = c(0, 100), ylim = c(0, 100), xlab = &quot;Prior mode&quot;, ylab = &quot;Likelihood mode&quot;, pch = ifelse(results$PLC, 19, 1), frame.plot = FALSE)
abline(a = 0, b = 1, lty = 2)
text(100, 15, &quot;Prior mode &gt; Likelihood mode&quot;, pos = 2, cex = 0.8)
text(  0, 85, &quot;Prior mode &lt; Likelihood mode&quot;, pos = 4, cex = 0.8)
lines(lowess(results$priorMode * 100, results$likeMode * 100, f = 2/3))
dev.off()
cor(results$priorMode, results$likeMode)

## How precise is the likelihood estimate alone (Assuming total population = 100,000 with 17% aged 6-59 months and p(SAM) = 2%)
rejected &lt;- results[results$PLC, ]
pop &lt;- 100000 * 0.17 * 0.02 
FPC &lt;- sqrt((pop - rejected$likeD) / (pop - 1))
rejected$hw &lt;- qnorm(0.975) * sqrt((rejected$likeMode * (1 - rejected$likeMode)) / rejected$likeD) * FPC
summary(rejected$hw)
rm(pop, FPC)
# How many have precision of Â± 10% or better
table(rejected$hw &lt;= 0.10)
prop.table(table(rejected$hw &lt;= 0.10))

## Proportion of SQUEAC assessments that fail by ...
#
#    prior likelihood conflict == TRUE AND precision worse than 10%
#
failN &lt;- sum(ifelse(rejected$hw &gt; 0.10, 1, 0))
failP &lt;- round(sum(ifelse(rejected$hw &gt; 0.10, 1, 0)) / nrow(results) * 100, 2) 
print(failN)
print(failP)
rm(rejected, failN, failP)
</command>
			<property title="analyseData"/>
			<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
		</node>
		<node id="2" date="1448884702913" uid="b256e103eb1f772e" x="50" y="-70">
			<command>## Retrieve data
work &lt;- read.table(file = &quot;squeacAttack.csv&quot;, header = TRUE, sep = &quot;,&quot;, stringsAsFactors = FALSE, na.strings = &quot;NA&quot;)
</command>
			<property title="readData" shape="INPUT"/>
			<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
		</node>
		<edge from="0" to="2"/>
		<edge from="2" to="1"/>
	</graph>
	<task>
		<taskgroup>
			<taskproperty/>
		</taskgroup>
	</task>
</rflow>
